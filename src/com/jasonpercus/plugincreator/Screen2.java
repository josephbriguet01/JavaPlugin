/*
 * Copyright (C) JasonPercus Systems, Inc - All Rights Reserved
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 *
 * Written by JasonPercus, December 2021
 */
package com.jasonpercus.plugincreator;



import com.jasonpercus.util.File;



/**
 * This class represents the screen which will aim to create a project (Stream Deck plugin)
 * @author JasonPercus
 * @version 1.0
 */
@SuppressWarnings("SleepWhileInLoop")
class Screen2 extends javax.swing.JFrame {

    
    
//ATTRIBUT
    /**
     * Determines if the Stream Deck project is being created
     */
    private boolean createProject;
    
    
    
//CONSTRUCTOR
    /**
     * Create the window which will aim to create a plugin
     */
    public Screen2() {
        initComponents();
        this.createProject = false;
    }
    
    
    
//METHODE PUBLIC
    /**
     * Close the window
     */
    @Override
    public void dispose(){
        if(!createProject)
            super.dispose();
    }
    
    
    
//METHODES PRIVATES
    /**
     * Create a folder
     * @param path Corresponds to the destination of the folder
     */
    private void createFolder(String path){
        File file = new File(path);
        if(!file.exists())
            file.mkdirs();
    }
    
    /**
     * Create a file
     * @param src Corresponds to the source copied to the classpath
     * @param dest Corresponds to the destination of the file
     * @param name Corresponds to the name of the project being created
     * @param containsVersionCode Determines whether or not the version number appears in the file
     */
    private void createFile(String src, String dest, String name, boolean containsVersionCode){
        try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(Screen2.class.getResourceAsStream(src))); java.io.FileWriter fw = new java.io.FileWriter(new File(dest))) {
            String doc = br.lines().collect(java.util.stream.Collectors.joining("\n")).replace("<!--ProjectName-->", name).replace("<!--projectname-->", name.toLowerCase());
            if(containsVersionCode)
                doc = doc.replace("{VERSION_CODE}", "" + PluginCreator.VERSION_CODE);
            fw.write(doc);
            fw.flush();
        } catch (java.io.IOException ex) {
            new OptionPane(ex.getClass().getSimpleName(), ex.getMessage(), OptionPane.TYPE_MESSAGE_ERROR).showMessageDialog();
            java.util.logging.Logger.getLogger(Screen2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Copy this library to the new project
     * @param dest Corresponds to the destination of this library
     * @throws java.net.URISyntaxException If this library cannot detect its path in the OS
     * @throws java.io.IOException If there is an input output error
     */
    private void placeLib(String dest) throws java.net.URISyntaxException, java.io.IOException {
        java.net.URL path = PluginCreator.class.getProtectionDomain().getCodeSource().getLocation();
        try (java.io.BufferedInputStream bis = new java.io.BufferedInputStream(new java.io.FileInputStream(new java.io.File(path.toURI()))); java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream(new java.io.FileOutputStream(new File(dest)))) {
            int value;
            while ((value = bis.read()) > -1) {
                bos.write(value);
            }
            bos.flush();
        }
    }
    
    /**
     * Copy a file
     * @param src Corresponds to the file in the classpath to copy
     * @param dest Corresponds to the destination of the copied file
     */
    private void copyFile(String src, String dest) {
        try {
            try (java.io.BufferedInputStream bis = new java.io.BufferedInputStream(Screen2.class.getResourceAsStream(src)); java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream(new java.io.FileOutputStream(new File(dest)))) {
                int value;
                while((value = bis.read()) > -1){
                    bos.write(value);
                }
                bos.flush();
            }
        } catch (java.io.IOException ex) {
            new OptionPane(ex.getClass().getSimpleName(), ex.getMessage(), OptionPane.TYPE_MESSAGE_ERROR).showMessageDialog();
            java.util.logging.Logger.getLogger(Screen2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        projectName = new javax.swing.JTextField();
        netbeans = new javax.swing.JButton();
        eclipse = new javax.swing.JButton();
        intellij = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Java Plugin Creator");
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/jasonpercus/plugincreator/ui/icon.png")));
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Creator"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Project name:");

        projectName.setFont(new java.awt.Font("Consolas", 0, 14)); // NOI18N
        projectName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        projectName.setText("MyPlugin");

        netbeans.setText("NetBeans IDE 8.2");
        netbeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netbeansActionPerformed(evt);
            }
        });

        eclipse.setText("Eclipse");
        eclipse.setEnabled(false);
        eclipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eclipseActionPerformed(evt);
            }
        });

        intellij.setText("IntelliJ IDEA");
        intellij.setEnabled(false);
        intellij.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intellijActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(projectName))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 186, Short.MAX_VALUE)
                        .addComponent(intellij)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eclipse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netbeans)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(projectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netbeans)
                    .addComponent(eclipse)
                    .addComponent(intellij))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the user presses the "NetBeans IDE 8.2" button
     * @param evt Corresponds to the event
     */
    private void netbeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netbeansActionPerformed
        if(projectName.getText().isEmpty()){
            new OptionPane("Error", "No project name !", OptionPane.TYPE_MESSAGE_ERROR).showMessageDialog();
        }else{
            String[] nameArray = projectName.getText().replace(" ", "_").split("\\.");
            String name = nameArray[nameArray.length-1];
            projectName.setText(name);
            this.createProject = true;
            
            createFolder(name);
            createFolder(name + "/nbproject");
            createFolder(name + "/src");
            createFolder(name + "/src/" + name.toLowerCase());
            createFolder(name + "/lib");
            copyFile("ui/netbeans/icon.ico",                           name + "/icon.ico");
            copyFile("ui/netbeans/PluginCreator-javadoc.zip",          name + "/lib/PluginCreator.v" + PluginCreator.VERSION_CODE + ".javadoc.zip");
            createFile("install/ui/netbeans/build.xml.txt",            name + "/build.xml", name, false);
            createFile("install/ui/netbeans/build-impl.xml.txt",       name + "/nbproject/build-impl.xml", name, false);
            createFile("install/ui/netbeans/project.properties.txt",   name + "/nbproject/project.properties", name, true);
            createFile("install/ui/netbeans/project.xml.txt",          name + "/nbproject/project.xml", name, false);
            createFile("install/ui/netbeans/MyManager.java.txt",       name + "/src/" + name.toLowerCase() + "/MyManager.java", name, false);
            
            try {
                placeLib(name + "/lib/JavaPlugin.jar");
                new OptionPane("Project created", "Your project (" + name + ") has been created successfully !", OptionPane.TYPE_MESSAGE_INFORMATION).showMessageDialog();
                this.createProject = false;
                this.dispose();
            } catch (java.net.URISyntaxException | java.io.IOException ex) {
                new OptionPane(ex.getClass().getSimpleName(), ex.getMessage(), OptionPane.TYPE_MESSAGE_ERROR).showMessageDialog();
                java.util.logging.Logger.getLogger(Screen2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                this.createProject = false;
            }
        }
    }//GEN-LAST:event_netbeansActionPerformed

    /**
     * When the user presses the "Eclipse" button
     * @param evt Corresponds to the event
     */
    private void eclipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eclipseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eclipseActionPerformed

    /**
     * When the user presses the "IntelliJ IDEA" button
     * @param evt Corresponds to the event
     */
    private void intellijActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intellijActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intellijActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton eclipse;
    private javax.swing.JButton intellij;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton netbeans;
    private javax.swing.JTextField projectName;
    // End of variables declaration//GEN-END:variables



}